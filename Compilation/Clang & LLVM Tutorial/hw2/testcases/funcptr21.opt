; ModuleID = 'funcptr21.bc'
source_filename = "funcptr21.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define i32 @add(i32 %a, i32 %b) #0 !dbg !6 {
entry:
  call void @llvm.dbg.value(metadata i32 %a, i64 0, metadata !10, metadata !11), !dbg !12
  call void @llvm.dbg.value(metadata i32 %b, i64 0, metadata !13, metadata !11), !dbg !14
  %add = add nsw i32 %a, %b, !dbg !15
  ret i32 %add, !dbg !16
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define i32 @sub(i32 %a, i32 %b) #0 !dbg !17 {
entry:
  call void @llvm.dbg.value(metadata i32 %a, i64 0, metadata !18, metadata !11), !dbg !19
  call void @llvm.dbg.value(metadata i32 %b, i64 0, metadata !20, metadata !11), !dbg !21
  %sub = sub nsw i32 %a, %b, !dbg !22
  ret i32 %sub, !dbg !23
}

; Function Attrs: nounwind uwtable
define i32 @foo(i32 %a, i32 %b, i32 (i32, i32)* %a_fptr) #0 !dbg !24 {
entry:
  call void @llvm.dbg.value(metadata i32 %a, i64 0, metadata !28, metadata !11), !dbg !29
  call void @llvm.dbg.value(metadata i32 %b, i64 0, metadata !30, metadata !11), !dbg !31
  call void @llvm.dbg.value(metadata i32 (i32, i32)* %a_fptr, i64 0, metadata !32, metadata !11), !dbg !33
  %call = call i32 %a_fptr(i32 %a, i32 %b), !dbg !34
  ret i32 %call, !dbg !35
}

; Function Attrs: nounwind uwtable
define i32 @moo(i8 signext %x, i32 %op1, i32 %op2) #0 !dbg !36 {
entry:
  call void @llvm.dbg.value(metadata i8 %x, i64 0, metadata !40, metadata !11), !dbg !41
  call void @llvm.dbg.value(metadata i32 %op1, i64 0, metadata !42, metadata !11), !dbg !43
  call void @llvm.dbg.value(metadata i32 %op2, i64 0, metadata !44, metadata !11), !dbg !45
  call void @llvm.dbg.value(metadata i32 (i32, i32)* @add, i64 0, metadata !46, metadata !11), !dbg !47
  call void @llvm.dbg.value(metadata i32 (i32, i32)* @sub, i64 0, metadata !48, metadata !11), !dbg !49
  call void @llvm.dbg.value(metadata i32 (i32, i32)* null, i64 0, metadata !50, metadata !11), !dbg !51
  %conv = sext i8 %x to i32, !dbg !52
  %cmp = icmp eq i32 %conv, 43, !dbg !54
  br i1 %cmp, label %if.then, label %if.else, !dbg !55

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 (i32, i32)* @add, i64 0, metadata !50, metadata !11), !dbg !51
  br label %if.end6, !dbg !56

if.else:                                          ; preds = %entry
  %conv2 = sext i8 %x to i32, !dbg !58
  %cmp3 = icmp eq i32 %conv2, 45, !dbg !60
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !61

if.then5:                                         ; preds = %if.else
  call void @llvm.dbg.value(metadata i32 (i32, i32)* @sub, i64 0, metadata !50, metadata !11), !dbg !51
  br label %if.end, !dbg !62

if.end:                                           ; preds = %if.then5, %if.else
  %t_fptr.0 = phi i32 (i32, i32)* [ @sub, %if.then5 ], [ null, %if.else ]
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  %t_fptr.1 = phi i32 (i32, i32)* [ @add, %if.then ], [ %t_fptr.0, %if.end ]
  %call = call i32 @foo(i32 %op1, i32 %op2, i32 (i32, i32)* %t_fptr.1), !dbg !64
  call void @llvm.dbg.value(metadata i32 %call, i64 0, metadata !65, metadata !11), !dbg !67
  ret i32 0, !dbg !68
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}
!llvm.ident = !{!5}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 4.0.0 (trunk 280809) (llvm/trunk 280808)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "funcptr21.c", directory: "/home/json-lee/workdir/compile/llvm/homework/assignment2/llvm-assignment/assign2-testcases-new")
!2 = !{}
!3 = !{i32 2, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{!"clang version 4.0.0 (trunk 280809) (llvm/trunk 280808)"}
!6 = distinct !DISubprogram(name: "add", scope: !1, file: !1, line: 1, type: !7, isLocal: false, isDefinition: true, scopeLine: 1, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!7 = !DISubroutineType(types: !8)
!8 = !{!9, !9, !9}
!9 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!10 = !DILocalVariable(name: "a", arg: 1, scope: !6, file: !1, line: 1, type: !9)
!11 = !DIExpression()
!12 = !DILocation(line: 1, column: 13, scope: !6)
!13 = !DILocalVariable(name: "b", arg: 2, scope: !6, file: !1, line: 1, type: !9)
!14 = !DILocation(line: 1, column: 20, scope: !6)
!15 = !DILocation(line: 2, column: 12, scope: !6)
!16 = !DILocation(line: 2, column: 4, scope: !6)
!17 = distinct !DISubprogram(name: "sub", scope: !1, file: !1, line: 5, type: !7, isLocal: false, isDefinition: true, scopeLine: 5, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!18 = !DILocalVariable(name: "a", arg: 1, scope: !17, file: !1, line: 5, type: !9)
!19 = !DILocation(line: 5, column: 13, scope: !17)
!20 = !DILocalVariable(name: "b", arg: 2, scope: !17, file: !1, line: 5, type: !9)
!21 = !DILocation(line: 5, column: 20, scope: !17)
!22 = !DILocation(line: 6, column: 12, scope: !17)
!23 = !DILocation(line: 6, column: 4, scope: !17)
!24 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 9, type: !25, isLocal: false, isDefinition: true, scopeLine: 9, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!25 = !DISubroutineType(types: !26)
!26 = !{!9, !9, !9, !27}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64, align: 64)
!28 = !DILocalVariable(name: "a", arg: 1, scope: !24, file: !1, line: 9, type: !9)
!29 = !DILocation(line: 9, column: 13, scope: !24)
!30 = !DILocalVariable(name: "b", arg: 2, scope: !24, file: !1, line: 9, type: !9)
!31 = !DILocation(line: 9, column: 20, scope: !24)
!32 = !DILocalVariable(name: "a_fptr", arg: 3, scope: !24, file: !1, line: 9, type: !27)
!33 = !DILocation(line: 9, column: 29, scope: !24)
!34 = !DILocation(line: 10, column: 12, scope: !24)
!35 = !DILocation(line: 10, column: 5, scope: !24)
!36 = distinct !DISubprogram(name: "moo", scope: !1, file: !1, line: 14, type: !37, isLocal: false, isDefinition: true, scopeLine: 14, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!37 = !DISubroutineType(types: !38)
!38 = !{!9, !39, !9, !9}
!39 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!40 = !DILocalVariable(name: "x", arg: 1, scope: !36, file: !1, line: 14, type: !39)
!41 = !DILocation(line: 14, column: 14, scope: !36)
!42 = !DILocalVariable(name: "op1", arg: 2, scope: !36, file: !1, line: 14, type: !9)
!43 = !DILocation(line: 14, column: 21, scope: !36)
!44 = !DILocalVariable(name: "op2", arg: 3, scope: !36, file: !1, line: 14, type: !9)
!45 = !DILocation(line: 14, column: 30, scope: !36)
!46 = !DILocalVariable(name: "a_fptr", scope: !36, file: !1, line: 15, type: !27)
!47 = !DILocation(line: 15, column: 11, scope: !36)
!48 = !DILocalVariable(name: "s_fptr", scope: !36, file: !1, line: 16, type: !27)
!49 = !DILocation(line: 16, column: 11, scope: !36)
!50 = !DILocalVariable(name: "t_fptr", scope: !36, file: !1, line: 17, type: !27)
!51 = !DILocation(line: 17, column: 11, scope: !36)
!52 = !DILocation(line: 19, column: 9, scope: !53)
!53 = distinct !DILexicalBlock(scope: !36, file: !1, line: 19, column: 9)
!54 = !DILocation(line: 19, column: 11, scope: !53)
!55 = !DILocation(line: 19, column: 9, scope: !36)
!56 = !DILocation(line: 21, column: 5, scope: !57)
!57 = distinct !DILexicalBlock(scope: !53, file: !1, line: 19, column: 19)
!58 = !DILocation(line: 22, column: 14, scope: !59)
!59 = distinct !DILexicalBlock(scope: !53, file: !1, line: 22, column: 14)
!60 = !DILocation(line: 22, column: 16, scope: !59)
!61 = !DILocation(line: 22, column: 14, scope: !53)
!62 = !DILocation(line: 24, column: 5, scope: !63)
!63 = distinct !DILexicalBlock(scope: !59, file: !1, line: 22, column: 24)
!64 = !DILocation(line: 26, column: 23, scope: !36)
!65 = !DILocalVariable(name: "result", scope: !36, file: !1, line: 26, type: !66)
!66 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!67 = !DILocation(line: 26, column: 14, scope: !36)
!68 = !DILocation(line: 27, column: 5, scope: !36)
