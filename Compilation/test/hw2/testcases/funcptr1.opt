; ModuleID = 'funcptr1.bc'
source_filename = "funcptr1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define i32 @add(i32 %a, i32 %b) #0 !dbg !8 {
entry:
  call void @llvm.dbg.value(metadata i32 %a, i64 0, metadata !12, metadata !13), !dbg !14
  call void @llvm.dbg.value(metadata i32 %b, i64 0, metadata !15, metadata !13), !dbg !16
  %add = add nsw i32 %a, %b, !dbg !17
  ret i32 %add, !dbg !18
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define i32 @sub(i32 %a, i32 %b) #0 !dbg !19 {
entry:
  call void @llvm.dbg.value(metadata i32 %a, i64 0, metadata !20, metadata !13), !dbg !21
  call void @llvm.dbg.value(metadata i32 %b, i64 0, metadata !22, metadata !13), !dbg !23
  %sub = sub nsw i32 %a, %b, !dbg !24
  ret i32 %sub, !dbg !25
}

; Function Attrs: nounwind uwtable
define i32 @foo(i32 %x) #0 !dbg !26 {
entry:
  call void @llvm.dbg.value(metadata i32 %x, i64 0, metadata !29, metadata !13), !dbg !30
  call void @llvm.dbg.value(metadata i32 (i32, i32)* @add, i64 0, metadata !31, metadata !13), !dbg !33
  call void @llvm.dbg.value(metadata i32 (i32, i32)* @sub, i64 0, metadata !34, metadata !13), !dbg !35
  call void @llvm.dbg.value(metadata i32 (i32, i32)* null, i64 0, metadata !36, metadata !13), !dbg !37
  call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !38, metadata !13), !dbg !39
  call void @llvm.dbg.value(metadata i32 2, i64 0, metadata !40, metadata !13), !dbg !41
  %cmp = icmp eq i32 %x, 3, !dbg !42
  br i1 %cmp, label %if.then, label %if.end, !dbg !44

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 (i32, i32)* @add, i64 0, metadata !36, metadata !13), !dbg !37
  br label %if.end, !dbg !45

if.end:                                           ; preds = %if.then, %entry
  %t_fptr.0 = phi i32 (i32, i32)* [ @add, %if.then ], [ null, %entry ]
  %cmp1 = icmp ne i32 (i32, i32)* %t_fptr.0, null, !dbg !47
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !49

if.then2:                                         ; preds = %if.end
  %call = call i32 %t_fptr.0(i32 1, i32 2), !dbg !50
  call void @llvm.dbg.value(metadata i32 %call, i64 0, metadata !52, metadata !13), !dbg !54
  br label %if.end3, !dbg !55

if.end3:                                          ; preds = %if.then2, %if.end
  ret i32 0, !dbg !56
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!5, !6}
!llvm.ident = !{!7}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 4.0.0 (trunk 280809) (llvm/trunk 280808)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3)
!1 = !DIFile(filename: "funcptr1.c", directory: "/home/json-lee/workdir/compile/llvm/homework/assignment2/llvm-assignment/assign2-testcases-new")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!5 = !{i32 2, !"Dwarf Version", i32 4}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{!"clang version 4.0.0 (trunk 280809) (llvm/trunk 280808)"}
!8 = distinct !DISubprogram(name: "add", scope: !1, file: !1, line: 2, type: !9, isLocal: false, isDefinition: true, scopeLine: 2, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!9 = !DISubroutineType(types: !10)
!10 = !{!11, !11, !11}
!11 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!12 = !DILocalVariable(name: "a", arg: 1, scope: !8, file: !1, line: 2, type: !11)
!13 = !DIExpression()
!14 = !DILocation(line: 2, column: 13, scope: !8)
!15 = !DILocalVariable(name: "b", arg: 2, scope: !8, file: !1, line: 2, type: !11)
!16 = !DILocation(line: 2, column: 20, scope: !8)
!17 = !DILocation(line: 3, column: 12, scope: !8)
!18 = !DILocation(line: 3, column: 4, scope: !8)
!19 = distinct !DISubprogram(name: "sub", scope: !1, file: !1, line: 6, type: !9, isLocal: false, isDefinition: true, scopeLine: 6, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!20 = !DILocalVariable(name: "a", arg: 1, scope: !19, file: !1, line: 6, type: !11)
!21 = !DILocation(line: 6, column: 13, scope: !19)
!22 = !DILocalVariable(name: "b", arg: 2, scope: !19, file: !1, line: 6, type: !11)
!23 = !DILocation(line: 6, column: 20, scope: !19)
!24 = !DILocation(line: 7, column: 12, scope: !19)
!25 = !DILocation(line: 7, column: 4, scope: !19)
!26 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 10, type: !27, isLocal: false, isDefinition: true, scopeLine: 10, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!27 = !DISubroutineType(types: !28)
!28 = !{!11, !11}
!29 = !DILocalVariable(name: "x", arg: 1, scope: !26, file: !1, line: 10, type: !11)
!30 = !DILocation(line: 10, column: 13, scope: !26)
!31 = !DILocalVariable(name: "a_fptr", scope: !26, file: !1, line: 11, type: !32)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64, align: 64)
!33 = !DILocation(line: 11, column: 11, scope: !26)
!34 = !DILocalVariable(name: "s_fptr", scope: !26, file: !1, line: 12, type: !32)
!35 = !DILocation(line: 12, column: 11, scope: !26)
!36 = !DILocalVariable(name: "t_fptr", scope: !26, file: !1, line: 13, type: !32)
!37 = !DILocation(line: 13, column: 11, scope: !26)
!38 = !DILocalVariable(name: "op1", scope: !26, file: !1, line: 15, type: !11)
!39 = !DILocation(line: 15, column: 9, scope: !26)
!40 = !DILocalVariable(name: "op2", scope: !26, file: !1, line: 15, type: !11)
!41 = !DILocation(line: 15, column: 16, scope: !26)
!42 = !DILocation(line: 17, column: 11, scope: !43)
!43 = distinct !DILexicalBlock(scope: !26, file: !1, line: 17, column: 9)
!44 = !DILocation(line: 17, column: 9, scope: !26)
!45 = !DILocation(line: 19, column: 5, scope: !46)
!46 = distinct !DILexicalBlock(scope: !43, file: !1, line: 17, column: 17)
!47 = !DILocation(line: 21, column: 16, scope: !48)
!48 = distinct !DILexicalBlock(scope: !26, file: !1, line: 21, column: 9)
!49 = !DILocation(line: 21, column: 9, scope: !26)
!50 = !DILocation(line: 22, column: 26, scope: !51)
!51 = distinct !DILexicalBlock(scope: !48, file: !1, line: 21, column: 25)
!52 = !DILocalVariable(name: "result", scope: !51, file: !1, line: 22, type: !53)
!53 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!54 = !DILocation(line: 22, column: 17, scope: !51)
!55 = !DILocation(line: 23, column: 5, scope: !51)
!56 = !DILocation(line: 24, column: 4, scope: !26)
