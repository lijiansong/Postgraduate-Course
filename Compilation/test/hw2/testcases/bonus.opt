; ModuleID = 'bonus.bc'
source_filename = "bonus.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.A = type { i32, i32 (i32, i32)* }

; Function Attrs: nounwind uwtable
define i32 @add(i32 %a, i32 %b) #0 !dbg !6 {
entry:
  call void @llvm.dbg.value(metadata i32 %a, i64 0, metadata !10, metadata !11), !dbg !12
  call void @llvm.dbg.value(metadata i32 %b, i64 0, metadata !13, metadata !11), !dbg !14
  %add = add nsw i32 %a, %b, !dbg !15
  ret i32 %add, !dbg !16
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define i32 @foo() #0 !dbg !17 {
entry:
  %a = alloca %struct.A, align 8
  call void @llvm.dbg.declare(metadata %struct.A* %a, metadata !20, metadata !11), !dbg !26
  %a_fptr = getelementptr inbounds %struct.A, %struct.A* %a, i32 0, i32 1, !dbg !27
  store i32 (i32, i32)* @add, i32 (i32, i32)** %a_fptr, align 8, !dbg !28
  call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !29, metadata !11), !dbg !30
  call void @llvm.dbg.value(metadata i32 2, i64 0, metadata !31, metadata !11), !dbg !32
  %a_fptr1 = getelementptr inbounds %struct.A, %struct.A* %a, i32 0, i32 1, !dbg !33
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr1, align 8, !dbg !33
  %call = call i32 %0(i32 1, i32 2), !dbg !34
  call void @llvm.dbg.value(metadata i32 %call, i64 0, metadata !35, metadata !11), !dbg !37
  ret i32 0, !dbg !38
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}
!llvm.ident = !{!5}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 4.0.0 (trunk 280809) (llvm/trunk 280808)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "bonus.c", directory: "/home/json-lee/workdir/compile/llvm/homework/assignment2/llvm-assignment/assign2-testcases-new")
!2 = !{}
!3 = !{i32 2, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{!"clang version 4.0.0 (trunk 280809) (llvm/trunk 280808)"}
!6 = distinct !DISubprogram(name: "add", scope: !1, file: !1, line: 7, type: !7, isLocal: false, isDefinition: true, scopeLine: 7, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!7 = !DISubroutineType(types: !8)
!8 = !{!9, !9, !9}
!9 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!10 = !DILocalVariable(name: "a", arg: 1, scope: !6, file: !1, line: 7, type: !9)
!11 = !DIExpression()
!12 = !DILocation(line: 7, column: 13, scope: !6)
!13 = !DILocalVariable(name: "b", arg: 2, scope: !6, file: !1, line: 7, type: !9)
!14 = !DILocation(line: 7, column: 20, scope: !6)
!15 = !DILocation(line: 8, column: 12, scope: !6)
!16 = !DILocation(line: 8, column: 4, scope: !6)
!17 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 11, type: !18, isLocal: false, isDefinition: true, scopeLine: 11, isOptimized: false, unit: !0, variables: !2)
!18 = !DISubroutineType(types: !19)
!19 = !{!9}
!20 = !DILocalVariable(name: "a", scope: !17, file: !1, line: 12, type: !21)
!21 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "A", file: !1, line: 1, size: 128, align: 64, elements: !22)
!22 = !{!23, !24}
!23 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !21, file: !1, line: 2, baseType: !9, size: 32, align: 32)
!24 = !DIDerivedType(tag: DW_TAG_member, name: "a_fptr", scope: !21, file: !1, line: 3, baseType: !25, size: 64, align: 64, offset: 64)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64, align: 64)
!26 = !DILocation(line: 12, column: 14, scope: !17)
!27 = !DILocation(line: 13, column: 7, scope: !17)
!28 = !DILocation(line: 13, column: 14, scope: !17)
!29 = !DILocalVariable(name: "op1", scope: !17, file: !1, line: 15, type: !9)
!30 = !DILocation(line: 15, column: 9, scope: !17)
!31 = !DILocalVariable(name: "op2", scope: !17, file: !1, line: 15, type: !9)
!32 = !DILocation(line: 15, column: 18, scope: !17)
!33 = !DILocation(line: 17, column: 25, scope: !17)
!34 = !DILocation(line: 17, column: 23, scope: !17)
!35 = !DILocalVariable(name: "result", scope: !17, file: !1, line: 17, type: !36)
!36 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!37 = !DILocation(line: 17, column: 14, scope: !17)
!38 = !DILocation(line: 18, column: 5, scope: !17)
