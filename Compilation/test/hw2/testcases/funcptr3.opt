; ModuleID = 'funcptr3.bc'
source_filename = "funcptr3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define i32 @add(i32 %a, i32 %b) #0 !dbg !6 {
entry:
  call void @llvm.dbg.value(metadata i32 %a, i64 0, metadata !10, metadata !11), !dbg !12
  call void @llvm.dbg.value(metadata i32 %b, i64 0, metadata !13, metadata !11), !dbg !14
  %add = add nsw i32 %a, %b, !dbg !15
  ret i32 %add, !dbg !16
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define i32 @foo(i32 %a, i32 %b, i32 (i32, i32)* %a_fptr) #0 !dbg !17 {
entry:
  call void @llvm.dbg.value(metadata i32 %a, i64 0, metadata !21, metadata !11), !dbg !22
  call void @llvm.dbg.value(metadata i32 %b, i64 0, metadata !23, metadata !11), !dbg !24
  call void @llvm.dbg.value(metadata i32 (i32, i32)* %a_fptr, i64 0, metadata !25, metadata !11), !dbg !26
  %call = call i32 %a_fptr(i32 %a, i32 %b), !dbg !27
  ret i32 %call, !dbg !28
}

; Function Attrs: nounwind uwtable
define i32 @moo(i8 signext %x, i32 %op1, i32 %op2) #0 !dbg !29 {
entry:
  call void @llvm.dbg.value(metadata i8 %x, i64 0, metadata !33, metadata !11), !dbg !34
  call void @llvm.dbg.value(metadata i32 %op1, i64 0, metadata !35, metadata !11), !dbg !36
  call void @llvm.dbg.value(metadata i32 %op2, i64 0, metadata !37, metadata !11), !dbg !38
  call void @llvm.dbg.value(metadata i32 (i32, i32)* @add, i64 0, metadata !39, metadata !11), !dbg !40
  %call = call i32 @foo(i32 %op1, i32 %op2, i32 (i32, i32)* @add), !dbg !41
  call void @llvm.dbg.value(metadata i32 %call, i64 0, metadata !42, metadata !11), !dbg !44
  ret i32 0, !dbg !45
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}
!llvm.ident = !{!5}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 4.0.0 (trunk 280809) (llvm/trunk 280808)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "funcptr3.c", directory: "/home/json-lee/workdir/compile/llvm/homework/assignment2/llvm-assignment/assign2-testcases-new")
!2 = !{}
!3 = !{i32 2, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{!"clang version 4.0.0 (trunk 280809) (llvm/trunk 280808)"}
!6 = distinct !DISubprogram(name: "add", scope: !1, file: !1, line: 1, type: !7, isLocal: false, isDefinition: true, scopeLine: 1, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!7 = !DISubroutineType(types: !8)
!8 = !{!9, !9, !9}
!9 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!10 = !DILocalVariable(name: "a", arg: 1, scope: !6, file: !1, line: 1, type: !9)
!11 = !DIExpression()
!12 = !DILocation(line: 1, column: 13, scope: !6)
!13 = !DILocalVariable(name: "b", arg: 2, scope: !6, file: !1, line: 1, type: !9)
!14 = !DILocation(line: 1, column: 20, scope: !6)
!15 = !DILocation(line: 2, column: 12, scope: !6)
!16 = !DILocation(line: 2, column: 4, scope: !6)
!17 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 5, type: !18, isLocal: false, isDefinition: true, scopeLine: 5, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!18 = !DISubroutineType(types: !19)
!19 = !{!9, !9, !9, !20}
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64, align: 64)
!21 = !DILocalVariable(name: "a", arg: 1, scope: !17, file: !1, line: 5, type: !9)
!22 = !DILocation(line: 5, column: 13, scope: !17)
!23 = !DILocalVariable(name: "b", arg: 2, scope: !17, file: !1, line: 5, type: !9)
!24 = !DILocation(line: 5, column: 20, scope: !17)
!25 = !DILocalVariable(name: "a_fptr", arg: 3, scope: !17, file: !1, line: 5, type: !20)
!26 = !DILocation(line: 5, column: 29, scope: !17)
!27 = !DILocation(line: 6, column: 12, scope: !17)
!28 = !DILocation(line: 6, column: 5, scope: !17)
!29 = distinct !DISubprogram(name: "moo", scope: !1, file: !1, line: 10, type: !30, isLocal: false, isDefinition: true, scopeLine: 10, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!30 = !DISubroutineType(types: !31)
!31 = !{!9, !32, !9, !9}
!32 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!33 = !DILocalVariable(name: "x", arg: 1, scope: !29, file: !1, line: 10, type: !32)
!34 = !DILocation(line: 10, column: 14, scope: !29)
!35 = !DILocalVariable(name: "op1", arg: 2, scope: !29, file: !1, line: 10, type: !9)
!36 = !DILocation(line: 10, column: 21, scope: !29)
!37 = !DILocalVariable(name: "op2", arg: 3, scope: !29, file: !1, line: 10, type: !9)
!38 = !DILocation(line: 10, column: 30, scope: !29)
!39 = !DILocalVariable(name: "a_fptr", scope: !29, file: !1, line: 11, type: !20)
!40 = !DILocation(line: 11, column: 11, scope: !29)
!41 = !DILocation(line: 12, column: 23, scope: !29)
!42 = !DILocalVariable(name: "result", scope: !29, file: !1, line: 12, type: !43)
!43 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!44 = !DILocation(line: 12, column: 14, scope: !29)
!45 = !DILocation(line: 13, column: 5, scope: !29)
